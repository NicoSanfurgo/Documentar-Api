{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "duration": 2807,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "47bba9df-8915-46de-9570-d1cec1a8fd81",
      "title": "",
      "file": "\\tests\\products.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6a14fc13-7d27-4d3c-ac44-b1ca3d5156f8",
          "title": "Testing products of API",
          "file": "\\tests\\products.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Debería devolver un array de objetos",
              "fullTitle": "Testing products of API Debería devolver un array de objetos",
              "timedOut": false,
              "duration": 443,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request\n  .get('/api/productos')\n  .expect(200)\n  .end((err, res) => {\n    expect(err).to.be.null\n    expect(res.body).to.be.an('array')\n    res.body.forEach((item) => {\n      expect(item).to.be.an('object')\n    })\n    done()\n  })",
              "err": {},
              "uuid": "d03acecb-b114-4520-8643-56c5deac3335",
              "parentUUID": "6a14fc13-7d27-4d3c-ac44-b1ca3d5156f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debería devolver un objeto con las claves esperadas",
              "fullTitle": "Testing products of API Debería devolver un objeto con las claves esperadas",
              "timedOut": false,
              "duration": 347,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request\n  .get('/api/productos/63bf3e206e8815d53b27a05c')\n  .expect(200)\n  .end((err, res) => {\n    expect(err).to.be.null\n    expect(res.body).to.be.an('object')\n    expect(res.body).to.have.any.keys(\n      'nombre',\n      'descripcion',\n      'codigo',\n      'foto',\n      'precio',\n      'stock'\n    )\n    done()\n  })",
              "err": {},
              "uuid": "e9e99714-f270-42b3-a71c-aa6df1dd4d8e",
              "parentUUID": "6a14fc13-7d27-4d3c-ac44-b1ca3d5156f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debería agregar un producto",
              "fullTitle": "Testing products of API Debería agregar un producto",
              "timedOut": false,
              "duration": 462,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newProduct = {\n  nombre: 'Product 1',\n  descripcion: 'Description 1',\n  codigo: '111',\n  foto: 'http://localhost/img1.jpg',\n  precio: '100',\n  stock: '10',\n}\nrequest\n  .post('/api/productos')\n  .send(newProduct)\n  .set('role', 'admin')\n  .expect(201)\n  .end((err, res) => {\n    expect(err).to.be.null\n    expect(res.body).to.not.have.property('error')\n    expect(res.body).to.have.property('message')\n    done()\n  })",
              "err": {},
              "uuid": "500f9035-9174-46cf-abf1-907c8252395c",
              "parentUUID": "6a14fc13-7d27-4d3c-ac44-b1ca3d5156f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debería actualizar un producto existente",
              "fullTitle": "Testing products of API Debería actualizar un producto existente",
              "timedOut": false,
              "duration": 841,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedProducts = {\n  nombre: ' Updated Product ',\n  descripcion: 'Updated Description',\n  codigo: '222',\n  foto: 'http://picsum.photos/200/300',\n  precio: '200',\n  stock: '3',\n}\nconst productID = '63e410fbd1909b1200355d80' // Escribir el ID de un producto existente\nrequest\n  .put(`/api/productos/${productID}`)\n  .send(updatedProducts)\n  .set('role', 'admin')\n  .expect(200)\n  .end((err, res) => {\n    expect(err).to.be.null\n    expect(res.body).to.not.have.property('error')\n    expect(res.body).to.have.property('message')\n    done()\n  })",
              "err": {},
              "uuid": "537f9529-23f3-46a0-88d7-3f8903d62c66",
              "parentUUID": "6a14fc13-7d27-4d3c-ac44-b1ca3d5156f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debería eliminar un producto existente",
              "fullTitle": "Testing products of API Debería eliminar un producto existente",
              "timedOut": false,
              "duration": 668,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productID = '63e410fbd1909b1200355d80' // Escribir el ID de un producto existente\nrequest\n  .delete(`/api/productos/${productID}`)\n  .set('role', 'admin')\n  .expect(200)\n  .end((err, res) => {\n    expect(err).to.be.null\n    expect(res.body).to.not.have.property('error')\n    expect(res.body).to.have.property('message')\n    done()\n  })",
              "err": {},
              "uuid": "945b3ef4-52ad-4140-8291-c957c6433293",
              "parentUUID": "6a14fc13-7d27-4d3c-ac44-b1ca3d5156f8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d03acecb-b114-4520-8643-56c5deac3335",
            "e9e99714-f270-42b3-a71c-aa6df1dd4d8e",
            "500f9035-9174-46cf-abf1-907c8252395c",
            "537f9529-23f3-46a0-88d7-3f8903d62c66",
            "945b3ef4-52ad-4140-8291-c957c6433293"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2761,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}